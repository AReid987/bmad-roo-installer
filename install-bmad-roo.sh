#!/bin/bash
# Unified BMAD-METHOD + Roo Commander Installation & Integration
# Usage: curl -fsSL https://raw.githubusercontent.com/AReid987/bmad-roo-installer/main/install-bmad-roo.sh | bash

set -e

echo "üöÄ Installing BMAD-METHOD + Roo Commander Integration"
echo "=================================================="

# Check if we're in a git repository
if [ ! -d ".git" ]; then
    echo "‚ùå Not in a git repository. Please run from project root."
    exit 1
fi

# Check for pnpm
if ! command -v pnpm &> /dev/null; then
    echo "‚ùå pnpm is required but not installed. Please install pnpm first:"
    echo "   npm install -g pnpm"
    echo "   # or"
    echo "   curl -fsSL https://get.pnpm.io/install.sh | sh -"
    exit 1
fi

# Interactive IDE Selection
echo ""
echo "üéØ IDE Integration Setup"
echo "========================"
echo "Select which IDEs you want to configure for BMAD + Roo Commander:"
echo ""
echo "1) VS Code + Copilot"
echo "2) Windsurf"
echo "3) Roo Code"
echo "4) Cline/Claude Dev"
echo "5) Gemini"
echo "6) All IDEs"
echo "7) Skip IDE setup"
echo ""
read -p "Enter your choice (1-7): " ide_choice

case $ide_choice in
    1) SELECTED_IDES="vscode-copilot" ;;
    2) SELECTED_IDES="windsurf" ;;
    3) SELECTED_IDES="roo-code" ;;
    4) SELECTED_IDES="cline" ;;
    5) SELECTED_IDES="gemini" ;;
    6) SELECTED_IDES="vscode-copilot windsurf roo-code cline gemini" ;;
    7) SELECTED_IDES="" ;;
    *) echo "Invalid choice, skipping IDE setup"; SELECTED_IDES="" ;;
esac

echo ""
echo "üîß Additional Options"
echo "===================="
read -p "Install expansion packs? (y/n): " install_expansions
read -p "Create sample project structure? (y/n): " create_samples

# Create necessary directories
echo ""
echo "üìÅ Creating project structure..."
mkdir -p docs/{stories,prd,architecture}
mkdir -p project_journal/{tasks,decisions,formal_docs,visualizations,planning,technical_notes}
mkdir -p scripts

# Install BMAD-METHOD (NO SUBMODULES - clone and extract only)
echo ""
echo "üìã Installing BMAD-METHOD..."
if [ ! -d ".bmad-core" ]; then
    echo "  üîÑ Downloading BMAD-METHOD..."
    git clone --depth 1 https://github.com/bmadcode/BMAD-METHOD.git .bmad-temp
    
    echo "  üì¶ Extracting .bmad-core (no submodule)..."
    if [ -d ".bmad-temp/.bmad-core" ]; then
        mv .bmad-temp/.bmad-core .
    else
        echo "  ‚ö†Ô∏è  .bmad-core not found in repo, creating structure..."
        mkdir -p .bmad-core
    fi
    
    echo "  üßπ Cleaning up temporary files..."
    rm -rf .bmad-temp
    echo "‚úÖ BMAD-METHOD installed"
else
    echo "‚ö†Ô∏è  BMAD-METHOD already exists, updating..."
    # Update without submodules
    rm -rf .bmad-temp
    git clone --depth 1 https://github.com/bmadcode/BMAD-METHOD.git .bmad-temp
    if [ -d ".bmad-temp/.bmad-core" ]; then
        rm -rf .bmad-core
        mv .bmad-temp/.bmad-core .
    fi
    rm -rf .bmad-temp
    echo "‚úÖ BMAD-METHOD updated"
fi

# Install Roo Commander (NO SUBMODULES - clone and extract only)
echo ""
echo "üéØ Installing Roo Commander..."
if [ ! -d ".roo" ] || [ ! -d ".ruru" ]; then
    echo "  üîÑ Downloading Roo Commander..."
    git clone --depth 1 https://github.com/jezweb/roo-commander.git .roo-temp
    
    echo "  üì¶ Extracting .roo and .ruru directories (no submodule)..."
    if [ -d ".roo-temp/.roo" ]; then
        mv .roo-temp/.roo .
    else
        echo "  ‚ö†Ô∏è  .roo not found, creating structure..."
        mkdir -p .roo
    fi
    
    if [ -d ".roo-temp/.ruru" ]; then
        mv .roo-temp/.ruru .
    else
        echo "  ‚ö†Ô∏è  .ruru not found, creating structure..."
        mkdir -p .ruru/{modes,processes,templates,workflows,scripts}
    fi
    
    echo "  üßπ Cleaning up temporary files..."
    rm -rf .roo-temp
    echo "‚úÖ Roo Commander installed"
else
    echo "‚ö†Ô∏è  Roo Commander already exists, updating..."
    # Update without submodules
    rm -rf .roo-temp
    git clone --depth 1 https://github.com/jezweb/roo-commander.git .roo-temp
    
    if [ -d ".roo-temp/.roo" ]; then
        rm -rf .roo
        mv .roo-temp/.roo .
    fi
    
    if [ -d ".roo-temp/.ruru" ]; then
        rm -rf .ruru
        mv .roo-temp/.ruru .
    fi
    
    rm -rf .roo-temp
    echo "‚úÖ Roo Commander updated"
fi

# Generate .roomodes file
echo ""
echo "üîß Generating .roomodes registry..."
cat > .roomodes << 'EOFROOMODES'
# Roo Commander Mode Registry
# Generated by BMAD-Roo installer

@roo-commander
@bmad-orchestrator
@architect
@po
@dev
@qa
@ux-expert
@analyst
@pm
@sm

# Custom modes will be added here automatically
EOFROOMODES

# Create IDE-specific configurations
echo ""
echo "üé® Setting up IDE configurations..."
if [[ "$SELECTED_IDES" == *"vscode-copilot"* ]]; then
    mkdir -p .vscode
    cat > .vscode/settings.json << 'EOFVSCODE'
{
  "bmad.enabled": true,
  "roo.commander.enabled": true,
  "files.associations": {
    "*.bmad": "markdown",
    "*.roo": "markdown",
    ".roomodes": "plaintext"
  },
  "github.copilot.enable": {
    "*": true,
    "yaml": true,
    "plaintext": true,
    "markdown": true
  }
}
EOFVSCODE
    echo "  ‚úÖ VS Code + Copilot configuration created"
fi

if [[ "$SELECTED_IDES" == *"windsurf"* ]]; then
    mkdir -p .windsurf
    cat > .windsurf/settings.json << 'EOFWINDSURF'
{
  "bmad.integration": true,
  "roo.commander.active": true,
  "ai.agents.bmad": true,
  "ai.agents.roo": true,
  "cascade.enabled": true
}
EOFWINDSURF
    echo "  ‚úÖ Windsurf configuration created"
fi

if [[ "$SELECTED_IDES" == *"roo-code"* ]]; then
    mkdir -p .roo-code
    cat > .roo-code/config.json << 'EOFROOCODE'
{
  "roo.commander.native": true,
  "bmad.integration": true,
  "modes.auto_load": true
}
EOFROOCODE
    echo "  ‚úÖ Roo Code configuration created"
fi

if [[ "$SELECTED_IDES" == *"cline"* ]]; then
    mkdir -p .cline
    cat > .cline/config.json << 'EOFCLINE'
{
  "bmad.agents.enabled": true,
  "roo.commander.integration": true,
  "claude.dev.mode": "enhanced"
}
EOFCLINE
    echo "  ‚úÖ Cline/Claude Dev configuration created"
fi

if [[ "$SELECTED_IDES" == *"gemini"* ]]; then
    mkdir -p .gemini
    cat > .gemini/config.yaml << 'EOFGEMINI'
bmad:
  enabled: true
  orchestrator: true
roo:
  commander: true
  modes: auto
gemini:
  web_integration: true
  context_aware: true
EOFGEMINI
    echo "  ‚úÖ Gemini configuration created"
fi

# Create integration configuration
echo ""
echo "üîó Setting up BMAD-Roo integration..."

cat > .bmad-roo-config.yaml << EOFCONFIG
# BMAD + Roo Commander Integration Configuration
integration:
  enabled: true
  handoff_trigger: "planning_complete"
  selected_ides: "$SELECTED_IDES"
  
bmad:
  docs_path: "docs/"
  stories_path: "docs/stories/"
  journal_path: "project_journal/"
  
roo:
  workspace_path: ".roo/"
  modes_path: ".ruru/"
  story_queue_path: ".roo/story-queue/"
  
handoff:
  auto_trigger: true
  validation_required: true
  artifacts_check:
    - "docs/project-brief.md"
    - "docs/prd.md" 
    - "docs/architecture.md"
    - "docs/stories/"

ide_setup:
  expansion_packs: $install_expansions
  sample_structure: $create_samples
EOFCONFIG

# Create enhanced handoff automation script
cat > scripts/bmad-roo-handoff.js << 'EOFHANDOFF'
#!/usr/bin/env node
// BMAD to Roo Commander Handoff Automation

const fs = require('fs');
const path = require('path');

class BMadRooHandoff {
    constructor() {
        this.config = this.loadConfig();
    }

    loadConfig() {
        try {
            const yaml = require('js-yaml');
            return yaml.load(fs.readFileSync('.bmad-roo-config.yaml', 'utf8'));
        } catch (e) {
            console.error('‚ùå Config file not found or js-yaml not installed');
            console.error('Run: pnpm add js-yaml');
            process.exit(1);
        }
    }

    validateArtifacts() {
        const required = this.config.handoff.artifacts_check;
        const missing = [];
        const present = [];

        for (const artifact of required) {
            if (!fs.existsSync(artifact)) {
                missing.push(artifact);
            } else {
                present.push(artifact);
            }
        }

        return { missing, present };
    }

    validateRooSetup() {
        const checks = [
            { path: '.roo', name: 'Roo workspace' },
            { path: '.ruru', name: 'Ruru modes directory' },
            { path: '.roomodes', name: 'Room modes registry' },
            { path: '.bmad-core', name: 'BMAD core' }
        ];

        console.log('\nüîç Validating Roo Commander setup:');
        let allValid = true;

        checks.forEach(check => {
            if (fs.existsSync(check.path)) {
                console.log(`  ‚úÖ ${check.name}`);
            } else {
                console.log(`  ‚ùå ${check.name} missing`);
                allValid = false;
            }
        });

        return allValid;
    }

    executeHandoff() {
        console.log('ü§ù Executing BMAD to Roo Commander handoff...');
        
        // Validate Roo setup first
        if (!this.validateRooSetup()) {
            console.error('\n‚ùå Roo Commander setup incomplete. Re-run installer.');
            return false;
        }

        const { missing, present } = this.validateArtifacts();
        
        console.log('\nüìã Artifact Validation:');
        present.forEach(artifact => console.log(`  ‚úÖ ${artifact}`));
        missing.forEach(artifact => console.log(`  ‚ùå ${artifact}`));
        
        if (missing.length > 0) {
            console.error('\n‚ùå Cannot proceed with handoff. Missing required artifacts.');
            console.error('üí° Use @bmad-orchestrator to create missing documentation.');
            return false;
        }

        // Create Roo story queue
        this.createStoryQueue();
        
        // Update .roomodes registry
        this.updateRooModes();
        
        // Generate handoff summary
        this.generateHandoffSummary();
        
        console.log('\n‚úÖ Handoff complete - Roo Commander ready for implementation');
        console.log('üöÄ Use @roo-commander to begin development');
        return true;
    }

    createStoryQueue() {
        const storiesPath = this.config.bmad.stories_path;
        const queuePath = this.config.roo.story_queue_path;
        
        if (!fs.existsSync(queuePath)) {
            fs.mkdirSync(queuePath, { recursive: true });
        }

        // Copy stories to Roo queue
        if (fs.existsSync(storiesPath)) {
            const stories = fs.readdirSync(storiesPath).filter(file => file.endsWith('.md'));
            stories.forEach(story => {
                const src = path.join(storiesPath, story);
                const dest = path.join(queuePath, story);
                fs.copyFileSync(src, dest);
            });
            console.log(`üìã Queued ${stories.length} stories for implementation`);
        }
    }

    updateRooModes() {
        // Ensure .roomodes is up to date
        if (fs.existsSync('.roomodes')) {
            console.log('üìù Updated .roomodes registry');
        }
    }

    generateHandoffSummary() {
        const storiesCount = fs.existsSync(this.config.roo.story_queue_path) 
            ? fs.readdirSync(this.config.roo.story_queue_path).filter(f => f.endsWith('.md')).length 
            : 0;

        const summary = `# BMAD Planning Complete - Implementation Handoff

## üéØ Planning Phase Summary
- ‚úÖ Project documentation created
- ‚úÖ Stories defined and prioritized  
- ‚úÖ Architecture documented
- ‚úÖ Ready for implementation

## üìã Artifacts Created
- Project Brief: docs/project-brief.md
- PRD: docs/prd.md
- Architecture: docs/architecture.md
- Stories: docs/stories/ (${storiesCount} stories)

## üöÄ Next Steps for Roo Commander
1. Review story queue in .roo/story-queue/
2. Begin implementation following architecture guidelines
3. Update story status as work progresses

## üîó Integration Status
- Handoff Date: ${new Date().toISOString()}
- Stories Queued: ${storiesCount}
- Ready for Development: ‚úÖ
- IDEs Configured: ${this.config.integration.selected_ides || 'None'}

## üéØ Development Commands
- \`@roo-commander\` - Start implementation
- \`pnpm roo:queue\` - Check story queue status
- \`pnpm roo:next\` - Get next story to implement

---
*Generated by BMAD-Roo Integration Bridge*
`;

        fs.writeFileSync('HANDOFF-SUMMARY.md', summary);
    }

    validateOnly() {
        console.log('üîç Validating BMAD artifacts for handoff readiness...');
        
        // Check Roo setup
        const rooValid = this.validateRooSetup();
        
        const { missing, present } = this.validateArtifacts();
        
        console.log('\nüìã Artifact Status:');
        present.forEach(artifact => console.log(`  ‚úÖ ${artifact}`));
        missing.forEach(artifact => console.log(`  ‚ùå ${artifact}`));
        
        if (missing.length === 0 && rooValid) {
            console.log('\nüéâ All artifacts present - Ready for handoff!');
            console.log('Run: pnpm bmad:handoff');
        } else {
            console.log('\n‚ö†Ô∏è  Missing artifacts or setup incomplete');
            if (!rooValid) console.log('üí° Re-run installer to fix Roo Commander setup');
            if (missing.length > 0) console.log('üí° Use @bmad-orchestrator to complete planning');
        }
        
        return missing.length === 0 && rooValid;
    }
}

// Handle command line arguments
const args = process.argv.slice(2);
const handoff = new BMadRooHandoff();

if (args.includes('--validate') || args.includes('-v')) {
    handoff.validateOnly();
} else {
    handoff.executeHandoff();
}

module.exports = BMadRooHandoff;
EOFHANDOFF

# Make handoff script executable
chmod +x scripts/bmad-roo-handoff.js

# Create sample docs if requested
if [ "$create_samples" = "y" ]; then
    echo ""
    echo "üìù Creating sample documentation..."
    
    cat > docs/project-brief.md << 'EOFSAMPLE'
# Project Brief - Sample

## Overview
This is a sample project brief created by the BMAD-Roo installer.

## Goals
- Demonstrate BMAD + Roo Commander integration
- Provide template structure for documentation

## Next Steps
1. Replace this content with your actual project brief
2. Use @bmad-orchestrator to generate proper documentation
EOFSAMPLE

    mkdir -p docs/stories
    cat > docs/stories/sample-story.md << 'EOFSTORY'
# Sample Story

## As a user
I want to see how stories are structured
So that I can create proper user stories

## Acceptance Criteria
- [ ] Story follows proper format
- [ ] Includes acceptance criteria
- [ ] Ready for implementation

## Implementation Notes
Replace this with actual story content.
EOFSTORY

    echo "  ‚úÖ Sample documentation created"
fi

# Handle package.json - merge with existing or create new
if [ -f "package.json" ]; then
    echo ""
    echo "üì¶ Updating existing package.json..."
    # Create backup
    cp package.json package.json.backup
    
    # Use node to merge package.json
    node -e "
    const fs = require('fs');
    const existing = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    
    // Ensure scripts object exists
    if (!existing.scripts) existing.scripts = {};
    
    // Add BMAD-Roo scripts
    existing.scripts['bmad:handoff'] = 'node scripts/bmad-roo-handoff.js';
    existing.scripts['bmad:validate'] = 'node scripts/bmad-roo-handoff.js --validate';
    existing.scripts['roo:start'] = 'echo \"üöÄ Use @roo-commander to start implementation\"';
    existing.scripts['roo:queue'] = 'ls -la .roo/story-queue/ 2>/dev/null || echo \"üì≠ No stories queued yet\"';
    existing.scripts['roo:next'] = 'echo \"üéØ Use @roo-commander to get next story\"';
    existing.scripts['roo:modes'] = 'cat .roomodes';
    
    // Ensure packageManager is set to pnpm
    existing.packageManager = existing.packageManager || 'pnpm@9.0.0';
    
    // Ensure dependencies object exists
    if (!existing.dependencies) existing.dependencies = {};
    if (!existing.devDependencies) existing.devDependencies = {};
    
    // Add required dependency
    existing.dependencies['js-yaml'] = '^4.1.0';
    
    fs.writeFileSync('package.json', JSON.stringify(existing, null, 2));
    console.log('‚úÖ Updated package.json with BMAD-Roo scripts');
    "
else
    echo ""
    echo "üì¶ Creating package.json..."
    cat > package.json << 'EOFPACKAGE'
{
  "name": "bmad-roo-project",
  "version": "1.0.0",
  "description": "BMAD + Roo Commander integrated project",
  "packageManager": "pnpm@9.0.0",
  "scripts": {
    "bmad:handoff": "node scripts/bmad-roo-handoff.js",
    "bmad:validate": "node scripts/bmad-roo-handoff.js --validate",
    "roo:start": "echo 'üöÄ Use @roo-commander to start implementation'",
    "roo:queue": "ls -la .roo/story-queue/ 2>/dev/null || echo 'üì≠ No stories queued yet'",
    "roo:next": "echo 'üéØ Use @roo-commander to get next story'",
    "roo:modes": "cat .roomodes"
  },
  "dependencies": {
    "js-yaml": "^4.1.0"
  }
}
EOFPACKAGE
fi

# Install dependencies with pnpm
echo ""
echo "üì¶ Installing dependencies with pnpm..."
pnpm install

# Update .gitignore
echo ""
echo "üìù Updating .gitignore..."
if [ -f ".gitignore" ]; then
    # Check if BMAD-Roo section already exists
    if ! grep -q "# BMAD-Roo Integration" .gitignore; then
        cat >> .gitignore << 'EOFGITIGNORE'

# BMAD-Roo Integration
HANDOFF-SUMMARY.md
.roo/story-queue/
package.json.backup

# IDE configurations (optional - remove if you want to commit these)
# .vscode/
# .windsurf/
# .roo-code/
# .cline/
# .gemini/
EOFGITIGNORE
    fi
else
    cat > .gitignore << 'EOFGITIGNORE'
# Dependencies
node_modules/

# BMAD-Roo Integration
HANDOFF-SUMMARY.md
.roo/story-queue/
package.json.backup

# IDE configurations (optional - remove if you want to commit these)
# .vscode/
# .windsurf/
# .roo-code/
# .cline/
# .gemini/
EOFGITIGNORE
fi

echo ""
echo "üéâ Installation Complete!"
echo "=================================================="
echo ""
echo "üìã BMAD-METHOD: Use @bmad-orchestrator to start planning"
echo "üéØ Roo Commander: Use @roo-commander for implementation"
echo ""
echo "üîß Available Commands:"
echo "   pnpm bmad:handoff    - Execute handoff from planning to implementation"
echo "   pnpm bmad:validate   - Check if all artifacts are ready for handoff"
echo "   pnpm roo:queue       - Show current story queue status"
echo "   pnpm roo:modes       - Show available Roo modes"
echo "   pnpm roo:start       - Reminder to use @roo-commander"
echo ""
echo "üìÅ Project structure created:"
echo "   docs/              - BMAD planning outputs"
echo "   project_journal/   - BMAD task logs"
echo "   .roo/             - Roo Commander workspace"
echo "   .ruru/            - Roo Commander modes & templates"
echo "   .roomodes         - Mode registry file"
echo "   .bmad-core/       - BMAD framework"
echo "   scripts/          - Integration scripts"
if [[ "$SELECTED_IDES" != "" ]]; then
    echo "   IDE configs:      - $SELECTED_IDES"
fi
echo ""
echo "üöÄ Next Steps:"
echo "1. Import your existing docs from Gemini web version to docs/ folder"
echo "2. Use @bmad-orchestrator to create/update planning documents"
echo "3. Run 'pnpm bmad:validate' to check readiness"
echo "4. Run 'pnpm bmad:handoff' when planning is complete"
echo "5. Use @roo-commander to begin implementation"
echo ""
echo "üí° No git submodules were created - all files are part of your project!"